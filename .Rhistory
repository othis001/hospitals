deaths <- sort(deaths)
print(deaths)
val <- deaths[pos]
thedata <- thedata[thedata[, hname] == val,]
thedata <- thedata[order(thedata$Hospital.Name),]
as.character(thedata[1,2])
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Reads outcome data
thedata <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available")
## Checks that state and outcome are valid
thedata <- thedata[ which(thedata$State == state), ]
if(nrow(thedata) == 0) stop("invalid state")
if(outcome == "heart failure") hname <- "Heart.Failure"
else if(outcome == "heart attack") hname <- "Heart.Attack"
else if(outcome == "pneumonia") hname <- "Pneumonia"
else stop("invalid outcome")
hname <- paste("Hospital.30.Day.Death..Mortality..Rates.from.", hname, sep = "")
## Return hospital name in that state with the given rank
## 30-day death rate
thedata <- thedata[complete.cases(thedata[ , hname]), ]
thedata[ , hname] <- as.numeric(as.character(thedata[,hname]))
deaths <- thedata[ , hname]
if(num == "best") pos <- 0
else if(num == "worst") pos <- length(deaths)
else if(num > length(deaths) || num < 0) stop("NA")
else
{
pos <- num
print(pos)
}
deaths <- sort(deaths)
print(deaths)
val <- deaths[pos]
thedata <- thedata[thedata[, hname] == val,]
thedata <- thedata[order(thedata$Hospital.Name),]
as.character(thedata[1,2])
}
rankhospital("TX", "heart failure", 4)
View(outcome)
rankhospital <- function(state, outcome, num = "best") {
## Reads outcome data
thedata <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available")
## Checks that state and outcome are valid
thedata <- thedata[ which(thedata$State == state), ]
if(nrow(thedata) == 0) stop("invalid state")
if(outcome == "heart failure") hname <- "Heart.Failure"
else if(outcome == "heart attack") hname <- "Heart.Attack"
else if(outcome == "pneumonia") hname <- "Pneumonia"
else stop("invalid outcome")
hname <- paste("Hospital.30.Day.Death..Mortality..Rates.from.", hname, sep = "")
## Return hospital name in that state with the given rank
## 30-day death rate
thedata <- thedata[complete.cases(thedata[ , hname]), ]
thedata[ , hname] <- as.numeric(as.character(thedata[,hname]))
deaths <- thedata[ , hname]
if(num == "best") pos <- 0
else if(num == "worst") pos <- length(deaths)
else if(num > length(deaths) || num < 0) stop("NA")
else
{
pos <- num
print(pos)
}
deaths <- sort(deaths)
print(deaths)
val <- deaths[pos]
minval <- min(which(deaths == val))
thedata <- thedata[thedata[, hname] == val,]
thedata <- thedata[order(thedata$Hospital.Name),]
as.character(thedata[val - minval + 1,2])
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Reads outcome data
thedata <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available")
## Checks that state and outcome are valid
thedata <- thedata[ which(thedata$State == state), ]
if(nrow(thedata) == 0) stop("invalid state")
if(outcome == "heart failure") hname <- "Heart.Failure"
else if(outcome == "heart attack") hname <- "Heart.Attack"
else if(outcome == "pneumonia") hname <- "Pneumonia"
else stop("invalid outcome")
hname <- paste("Hospital.30.Day.Death..Mortality..Rates.from.", hname, sep = "")
## Return hospital name in that state with the given rank
## 30-day death rate
thedata <- thedata[complete.cases(thedata[ , hname]), ]
thedata[ , hname] <- as.numeric(as.character(thedata[,hname]))
deaths <- thedata[ , hname]
if(num == "best") pos <- 0
else if(num == "worst") pos <- length(deaths)
else if(num > length(deaths) || num < 0) stop("NA")
else
{
pos <- num
print(pos)
}
deaths <- sort(deaths)
val <- deaths[pos]
print(val)
minval <- min(which(deaths == val))
print(minval)
thedata <- thedata[thedata[, hname] == val,]
thedata <- thedata[order(thedata$Hospital.Name),]
as.character(thedata[val - minval + 1,2])
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Reads outcome data
thedata <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available")
## Checks that state and outcome are valid
thedata <- thedata[ which(thedata$State == state), ]
if(nrow(thedata) == 0) stop("invalid state")
if(outcome == "heart failure") hname <- "Heart.Failure"
else if(outcome == "heart attack") hname <- "Heart.Attack"
else if(outcome == "pneumonia") hname <- "Pneumonia"
else stop("invalid outcome")
hname <- paste("Hospital.30.Day.Death..Mortality..Rates.from.", hname, sep = "")
## Return hospital name in that state with the given rank
## 30-day death rate
thedata <- thedata[complete.cases(thedata[ , hname]), ]
thedata[ , hname] <- as.numeric(as.character(thedata[,hname]))
deaths <- thedata[ , hname]
if(num == "best") pos <- 0
else if(num == "worst") pos <- length(deaths)
else if(num > length(deaths) || num < 0) stop("NA")
else
{
pos <- num
print(pos)
}
deaths <- sort(deaths)
val <- deaths[pos]
print(val)
minpos <- min(which(deaths == val))
print(minval)
thedata <- thedata[thedata[, hname] == val,]
thedata <- thedata[order(thedata$Hospital.Name),]
as.character(thedata[pos - minpos + 1,2])
}
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Reads outcome data
thedata <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available")
## Checks that state and outcome are valid
thedata <- thedata[ which(thedata$State == state), ]
if(nrow(thedata) == 0) stop("invalid state")
if(outcome == "heart failure") hname <- "Heart.Failure"
else if(outcome == "heart attack") hname <- "Heart.Attack"
else if(outcome == "pneumonia") hname <- "Pneumonia"
else stop("invalid outcome")
hname <- paste("Hospital.30.Day.Death..Mortality..Rates.from.", hname, sep = "")
## Return hospital name in that state with the given rank
## 30-day death rate
thedata <- thedata[complete.cases(thedata[ , hname]), ]
thedata[ , hname] <- as.numeric(as.character(thedata[,hname]))
deaths <- thedata[ , hname]
if(num == "best") pos <- 0
else if(num == "worst") pos <- length(deaths)
else if(num > length(deaths) || num < 0) stop("NA")
else
{
pos <- num
print(pos)
}
deaths <- sort(deaths)
val <- deaths[pos]
print(val)
minpos <- min(which(deaths == val))
print(minpos)
thedata <- thedata[thedata[, hname] == val,]
thedata <- thedata[order(thedata$Hospital.Name),]
as.character(thedata[pos - minpos + 1,2])
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital <- function(state, outcome, num = "best") {
## Reads outcome data
thedata <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available")
## Checks that state and outcome are valid
thedata <- thedata[ which(thedata$State == state), ]
if(nrow(thedata) == 0) stop("invalid state")
if(outcome == "heart failure") hname <- "Heart.Failure"
else if(outcome == "heart attack") hname <- "Heart.Attack"
else if(outcome == "pneumonia") hname <- "Pneumonia"
else stop("invalid outcome")
hname <- paste("Hospital.30.Day.Death..Mortality..Rates.from.", hname, sep = "")
## Return hospital name in that state with the given rank
## 30-day death rate
thedata <- thedata[complete.cases(thedata[ , hname]), ]
thedata[ , hname] <- as.numeric(as.character(thedata[,hname]))
deaths <- thedata[ , hname]
if(num == "best") pos <- 0
else if(num == "worst") pos <- length(deaths)
else if(num > length(deaths) || num < 0) return("NA")
else
{
pos <- num
print(pos)
}
deaths <- sort(deaths)
val <- deaths[pos]
print(val)
minpos <- min(which(deaths == val))
print(minpos)
thedata <- thedata[thedata[, hname] == val,]
thedata <- thedata[order(thedata$Hospital.Name),]
as.character(thedata[pos - minpos + 1,2])
}
rankhospital("MN", "heart attack", 5000)
rankhospital <- function(state, outcome, num = "best") {
## Reads outcome data
thedata <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available")
## Checks that state and outcome are valid
thedata <- thedata[ which(thedata$State == state), ]
if(nrow(thedata) == 0) stop("invalid state")
if(outcome == "heart failure") hname <- "Heart.Failure"
else if(outcome == "heart attack") hname <- "Heart.Attack"
else if(outcome == "pneumonia") hname <- "Pneumonia"
else stop("invalid outcome")
hname <- paste("Hospital.30.Day.Death..Mortality..Rates.from.", hname, sep = "")
## Return hospital name in that state with the given rank
## 30-day death rate
thedata <- thedata[complete.cases(thedata[ , hname]), ]
thedata[ , hname] <- as.numeric(as.character(thedata[,hname]))
deaths <- thedata[ , hname]
if(num == "best") pos <- 0
else if(num == "worst") pos <- length(deaths)
else if(num > length(deaths) || num < 0) return(NA)
else
{
pos <- num
print(pos)
}
deaths <- sort(deaths)
val <- deaths[pos]
print(val)
minpos <- min(which(deaths == val))
print(minpos)
thedata <- thedata[thedata[, hname] == val,]
thedata <- thedata[order(thedata$Hospital.Name),]
as.character(thedata[pos - minpos + 1,2])
}
rankhospital("MN", "heart attack", 5000)
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
rankhospital <- function(state, outcome, num = "best") {
## Reads outcome data
thedata <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available")
## Checks that state and outcome are valid
thedata <- thedata[ which(thedata$State == state), ]
if(nrow(thedata) == 0) stop("invalid state")
if(outcome == "heart failure") hname <- "Heart.Failure"
else if(outcome == "heart attack") hname <- "Heart.Attack"
else if(outcome == "pneumonia") hname <- "Pneumonia"
else stop("invalid outcome")
hname <- paste("Hospital.30.Day.Death..Mortality..Rates.from.", hname, sep = "")
## Return hospital name in that state with the given rank
## 30-day death rate
thedata <- thedata[complete.cases(thedata[ , hname]), ]
thedata[ , hname] <- as.numeric(as.character(thedata[,hname]))
deaths <- thedata[ , hname]
if(num == "best") pos <- 0
else if(num == "worst") pos <- length(deaths)
else if(num > length(deaths) || num < 0) return(NA)
else
{
pos <- num
}
deaths <- sort(deaths)
val <- deaths[pos]
minpos <- min(which(deaths == val))
thedata <- thedata[thedata[, hname] == val,]
thedata <- thedata[order(thedata$Hospital.Name),]
as.character(thedata[pos - minpos + 1,2])
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital <- function(state, outcome, num = "best") {
## Reads outcome data
thedata <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available")
## Checks that state and outcome are valid
thedata <- thedata[ which(thedata$State == state), ]
if(nrow(thedata) == 0) stop("invalid state")
if(outcome == "heart failure") hname <- "Heart.Failure"
else if(outcome == "heart attack") hname <- "Heart.Attack"
else if(outcome == "pneumonia") hname <- "Pneumonia"
else stop("invalid outcome")
hname <- paste("Hospital.30.Day.Death..Mortality..Rates.from.", hname, sep = "")
## Return hospital name in that state with the given rank
## 30-day death rate
thedata <- thedata[complete.cases(thedata[ , hname]), ]
thedata[ , hname] <- as.numeric(as.character(thedata[,hname]))
deaths <- thedata[ , hname]
if(num == "best") pos <- 1
else if(num == "worst") pos <- length(deaths)
else if(num > length(deaths) || num < 1) return(NA)
else pos <- num
deaths <- sort(deaths)
val <- deaths[pos]
minpos <- min(which(deaths == val))
thedata <- thedata[thedata[, hname] == val,]
thedata <- thedata[order(thedata$Hospital.Name),]
as.character(thedata[pos - minpos + 1,2])
}
rankhospital("MN", "heart attack", 5000)
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
rankhospital("HI", "heart attack", 4)
rankhospital("NJ", "pneumonia", "worst")
rankhospital("NV", "heart failure", 10)
View(outcome)
rankall <- function(outcome, num = "best") {
## Reads outcome data
thedata <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available")
## Checks that state and outcome are valid
thedata <- thedata[ which(thedata$State == state), ]
if(nrow(thedata) == 0) stop("invalid state")
if(outcome != "heart failure" && outcome != "heart attack" && outcome != "pneumonia") stop("invalid outcome")
## For each state, find the hospital of the given rank
## Returns a data frame with the hospital names and the
## (abbreviated) state name
states <- thedata[ , State]
states <- unique(states)
output <- data.frame(Hospital.Name=character(), State=character(), stringsAsFactors=FALSE)
for(s in states)
{
output[s, ] <- c(rankhospital(s, outcome, num), s)
}
output
}
rankall("heart failure", 2)
rankall <- function(outcome, num = "best") {
## Reads outcome data
thedata <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available")
## Checks that state and outcome are valid
thedata <- thedata[ which(thedata$State == state), ]
if(nrow(thedata) == 0) stop("invalid state")
if(outcome != "heart failure" && outcome != "heart attack" && outcome != "pneumonia") stop("invalid outcome")
## For each state, find the hospital of the given rank
## Returns a data frame with the hospital names and the
## (abbreviated) state name
states <- thedata[ , State]
states <- unique(states)
output <- data.frame(Hospital.Name=character(), State=character(), stringsAsFactors=FALSE)
for(s in states)
{
#        output[s, ] <- c(rankhospital(s, outcome, num), s)
}
output
}
rankall("heart failure", 2)
rankall <- function(outcome, num = "best") {
## Reads outcome data
thedata <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available")
## Checks that state and outcome are valid
thedata <- thedata[ which(thedata$State == state), ]
if(nrow(thedata) == 0) stop("invalid state")
if(outcome != "heart failure" && outcome != "heart attack" && outcome != "pneumonia") stop("invalid outcome")
## For each state, find the hospital of the given rank
## Returns a data frame with the hospital names and the
## (abbreviated) state name
states <- thedata$State
states <- unique(states)
output <- data.frame(Hospital.Name=character(), State=character(), stringsAsFactors=FALSE)
for(s in states)
{
output[s, ] <- c(rankhospital(s, outcome, num), s)
}
output
}
rankall("heart failure", 2)
rankall <- function(outcome, num = "best") {
## Reads outcome data
thedata <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available")
## Checks that state and outcome are valid
if(outcome != "heart failure" && outcome != "heart attack" && outcome != "pneumonia") stop("invalid outcome")
## For each state, find the hospital of the given rank
## Returns a data frame with the hospital names and the
## (abbreviated) state name
states <- thedata$State
states <- unique(states)
output <- data.frame(Hospital.Name=character(), State=character(), stringsAsFactors=FALSE)
for(s in states)
{
output[s, ] <- c(rankhospital(s, outcome, num), s)
}
output
}
rankall("heart failure", 2)
rankall("pneumonia", "worst")
## best is a function that take two arguments: the 2-character abbreviated name of a state and an
## outcome name. The function reads the outcome-of-care-measures.csv file and returns a character vector
## with the name of the hospital that has the best (i.e. lowest) 30-day mortality for the specified outcome
## in that state.
best <- function(state, outcome) {
## Reads outcome data
thedata <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available")
## Checks that state and outcome are valid
thedata <- thedata[ which(thedata$State == state), ]
if(nrow(thedata) == 0) stop("invalid state")
if(outcome == "heart failure") hname = "Heart.Failure"
else if(outcome == "heart attack") hname = "Heart.Attack"
else if(outcome == "pneumonia") hname = "Pneumonia"
else stop("invalid outcome")
hname <- paste("Hospital.30.Day.Death..Mortality..Rates.from.", hname, sep = "")
## Returns hospital name in that state with lowest 30-day death
## rate
## First we find the minimum death rate.
thedata <- thedata[complete.cases(thedata[, hname]), ]
thedata[,hname] <- as.numeric(as.character(thedata[,hname]))
deathrate <- thedata[ , hname]
minimum <- min(deathrate)
## Now return the first hospital alphabetically that has it.
thedata <- thedata[thedata[, hname] == minimum,]
thedata <- thedata[order(thedata$Hospital.Name),]
as.character(thedata[1,2])
}
best("NY", "pneumonia")
best("NY", "pneumonia")
## best is a function that take two arguments: the 2-character abbreviated name of a state and an
## outcome name. The function reads the outcome-of-care-measures.csv file and returns a character vector
## with the name of the hospital that has the best (i.e. lowest) 30-day mortality for the specified outcome
## in that state.
best <- function(state, outcome) {
## Reads outcome data.
thedata <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available")
## Checks that state and outcome are valid.
thedata <- thedata[ which(thedata$State == state), ]
if(nrow(thedata) == 0) stop("invalid state")
if(outcome == "heart failure") hname = "Heart.Failure"
else if(outcome == "heart attack") hname = "Heart.Attack"
else if(outcome == "pneumonia") hname = "Pneumonia"
else stop("invalid outcome")
hname <- paste("Hospital.30.Day.Death..Mortality..Rates.from.", hname, sep = "")
## First we find the minimum death rate.
thedata <- thedata[complete.cases(thedata[, hname]), ]
thedata[,hname] <- as.numeric(as.character(thedata[,hname]))
deathrates <- thedata[ , hname]
minimum <- min(deathrates)
## Now return the first hospital alphabetically that has it.
thedata <- thedata[thedata[, hname] == minimum,]
thedata <- thedata[order(thedata$Hospital.Name),]
as.character(thedata[1,2])
}
best("NY", "pneumonia")
## rankhospital is a function that takes three arguments: the 2-character abbreviated name of a
## state (state), an outcome (outcome), and the ranking of a hospital in that state for that outcome (num).
## The function reads the outcome-of-care-measures.csv file and returns a character vector with the name
## of the hospital that has the ranking specified by the num argument.
rankhospital <- function(state, outcome, num = "best") {
## Reads outcome data.
thedata <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available")
## Checks that state and outcome are valid.
thedata <- thedata[ which(thedata$State == state), ]
if(nrow(thedata) == 0) stop("invalid state")
if(outcome == "heart failure") hname <- "Heart.Failure"
else if(outcome == "heart attack") hname <- "Heart.Attack"
else if(outcome == "pneumonia") hname <- "Pneumonia"
else stop("invalid outcome")
hname <- paste("Hospital.30.Day.Death..Mortality..Rates.from.", hname, sep = "")
## First we extract and sort the deathrates.
thedata <- thedata[complete.cases(thedata[ , hname]), ]
thedata[ , hname] <- as.numeric(as.character(thedata[,hname]))
deathrates <- thedata[ , hname]
deathrates <- sort(deathrates)
## Now we find the desired position (pos) and value (val) in the sorted deathrate vector.
if(num == "best") pos <- 1
else if(num == "worst") pos <- length(deathrates)
else if(num > length(deathrates) || num < 1) return(NA)
else pos <- num
val <- deathrates[pos]
## minpos is the position of the first occurence of val in our deathrates vector.
minpos <- min(which(deathrates == val))
## Now we remove all rows except for ones with a deathrate of val, and order.
thedata <- thedata[thedata[, hname] == val,]
thedata <- thedata[order(thedata$Hospital.Name),]
## pos-minpos+1 will be the correct position in whats left in our data frame.
as.character(thedata[pos - minpos + 1,2])
}
rankhospital("NV", "heart failure", 10)
## rankall is a function that takes two arguments: an outcome name (outcome) and a hospital ranking (num).
## The function reads the outcome-of-care-measures.csv file and returns a 2-column data frame
## containing the hospital in each state that has the ranking specified in num.
rankall <- function(outcome, num = "best") {
## Reads outcome data
thedata <- read.csv("outcome-of-care-measures.csv", na.strings="Not Available")
## Checks that the outcome is valid.
if(outcome != "heart failure" && outcome != "heart attack" && outcome != "pneumonia") stop("invalid outcome")
## For each state, finds the hospital of the given rank.
## Returns a data frame with the hospital names and the
## (abbreviated) state name.
states <- thedata$State
states <- unique(states)
source("rankhospital.R")
output <- data.frame(Hospital.Name=character(), State=character(), stringsAsFactors=FALSE)
for(s in states) output[s, ] <- c(rankhospital(s, outcome, num), s)
output
}
View(rankhospital)
rankhospital = ""
rankall("heart failure", 2)
